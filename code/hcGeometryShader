#version 330 core
layout (points) in;
layout (triangle_strip, max_vertices = 144) out;

uniform mat4 mvpMat;
uniform float mutationFactor;

#define PI 3.1415926535897932384626433832795
#define TAU PI*2

float dist_to_base_point = 1.f;
//float mutationFactor = 0.81;

vec4 baseVertices[8];
vec4 hexagonVertices[6*8];
vec4 baseTruncatedVertices[24];
vec4 topVertex;
vec4 botVertex;

vec4 indexedPoints[144];

// FUNCTIONS DECLARATIONS
vec4 GetPlaneVector(int idx);
mat4 RotationMatrix(vec4 axis, float angle);

void main() {   

	// BASE POINTS

	// Back-Right-Top
	baseVertices[0] = gl_in[0].gl_Position + (normalize(vec4(-1,1,-1,0)) * dist_to_base_point);	
	// Back-Right-Bot
	baseVertices[1] = gl_in[0].gl_Position + (normalize(vec4(-1,-1,-1,0)) * dist_to_base_point);
	// Back-Left-Top
	baseVertices[2] = gl_in[0].gl_Position + (normalize(vec4(1,1,-1,0)) * dist_to_base_point);
	// Back-Left-Bot
	baseVertices[3] = gl_in[0].gl_Position + (normalize(vec4(1,-1,-1,0)) * dist_to_base_point);
	// Front-Right-Top
	baseVertices[4] = gl_in[0].gl_Position + (normalize(vec4(-1,1,1,0)) * dist_to_base_point);	
	// Front-Right-Bot
	baseVertices[5] = gl_in[0].gl_Position + (normalize(vec4(-1,-1,1,0)) * dist_to_base_point);
	// Front-Left-Top
	baseVertices[6] = gl_in[0].gl_Position + (normalize(vec4(1,1,1,0)) * dist_to_base_point);
	// Front-Left-Bot
	baseVertices[7] = gl_in[0].gl_Position + (normalize(vec4(1,-1,1,0)) * dist_to_base_point);


	// HEXAGONS
	vec4 inPlaneVec;
	mat4 rotMat;
	for(int i = 0; i < 8; i++){
		rotMat = RotationMatrix(baseVertices[i] - gl_in[0].gl_Position, 60);
		inPlaneVec = GetPlaneVector(i);

		inPlaneVec = RotationMatrix(baseVertices[i] - gl_in[0].gl_Position, -30) * inPlaneVec;

		for(int j = 0; j < 6; j++){
			inPlaneVec = rotMat * inPlaneVec;
			hexagonVertices[(6*i)+j] = baseVertices[i] + (inPlaneVec * mutationFactor);
		}
	}

	// INDEXING (MAX 144)

	//Hexagons (8)
	indexedPoints[0] = hexagonVertices[(6 * 0) + 3];
	indexedPoints[1] = hexagonVertices[(6 * 0) + 4];
	indexedPoints[2] = hexagonVertices[(6 * 0) + 2];
	indexedPoints[3] = hexagonVertices[(6 * 0) + 5];
	indexedPoints[4] = hexagonVertices[(6 * 0) + 1];
	indexedPoints[5] = hexagonVertices[(6 * 0) + 0];

	indexedPoints[6] = hexagonVertices[(6 * 1) + 3];
	indexedPoints[7] = hexagonVertices[(6 * 1) + 4];
	indexedPoints[8] = hexagonVertices[(6 * 1) + 2];
	indexedPoints[9] = hexagonVertices[(6 * 1) + 5];
	indexedPoints[10] = hexagonVertices[(6 * 1) + 1];
	indexedPoints[11] = hexagonVertices[(6 * 1) + 0];
	
	indexedPoints[12] = hexagonVertices[(6 * 2) + 3];
	indexedPoints[13] = hexagonVertices[(6 * 2) + 4];
	indexedPoints[14] = hexagonVertices[(6 * 2) + 2];
	indexedPoints[15] = hexagonVertices[(6 * 2) + 5];
	indexedPoints[16] = hexagonVertices[(6 * 2) + 1];
	indexedPoints[17] = hexagonVertices[(6 * 2) + 0];
	
	indexedPoints[18] = hexagonVertices[(6 * 3) + 3];
	indexedPoints[19] = hexagonVertices[(6 * 3) + 4];
	indexedPoints[20] = hexagonVertices[(6 * 3) + 2];
	indexedPoints[21] = hexagonVertices[(6 * 3) + 5];
	indexedPoints[22] = hexagonVertices[(6 * 3) + 1];
	indexedPoints[23] = hexagonVertices[(6 * 3) + 0];
	
	indexedPoints[24] = hexagonVertices[(6 * 4) + 3];
	indexedPoints[25] = hexagonVertices[(6 * 4) + 4];
	indexedPoints[26] = hexagonVertices[(6 * 4) + 2];
	indexedPoints[27] = hexagonVertices[(6 * 4) + 5];
	indexedPoints[28] = hexagonVertices[(6 * 4) + 1];
	indexedPoints[29] = hexagonVertices[(6 * 4) + 0];
	
	indexedPoints[30] = hexagonVertices[(6 * 5) + 3];
	indexedPoints[31] = hexagonVertices[(6 * 5) + 4];
	indexedPoints[32] = hexagonVertices[(6 * 5) + 2];
	indexedPoints[33] = hexagonVertices[(6 * 5) + 5];
	indexedPoints[34] = hexagonVertices[(6 * 5) + 1];
	indexedPoints[35] = hexagonVertices[(6 * 5) + 0];
	
	indexedPoints[36] = hexagonVertices[(6 * 6) + 3];
	indexedPoints[37] = hexagonVertices[(6 * 6) + 4];
	indexedPoints[38] = hexagonVertices[(6 * 6) + 2];
	indexedPoints[39] = hexagonVertices[(6 * 6) + 5];
	indexedPoints[40] = hexagonVertices[(6 * 6) + 1];
	indexedPoints[41] = hexagonVertices[(6 * 6) + 0];
	
	indexedPoints[42] = hexagonVertices[(6 * 7) + 3];
	indexedPoints[43] = hexagonVertices[(6 * 7) + 4];
	indexedPoints[44] = hexagonVertices[(6 * 7) + 2];
	indexedPoints[45] = hexagonVertices[(6 * 7) + 5];
	indexedPoints[46] = hexagonVertices[(6 * 7) + 1];
	indexedPoints[47] = hexagonVertices[(6 * 7) + 0];
	
	//Quads (12)
	indexedPoints[48] = hexagonVertices[(6 * 4) + 1];
	indexedPoints[49] = hexagonVertices[(6 * 4) + 0];
	indexedPoints[50] = hexagonVertices[(6 * 6) + 4];
	indexedPoints[51] = hexagonVertices[(6 * 6) + 5];
	
	indexedPoints[52] = hexagonVertices[(6 * 4) + 3];
	indexedPoints[53] = hexagonVertices[(6 * 4) + 2];
	indexedPoints[54] = hexagonVertices[(6 * 0) + 2];
	indexedPoints[55] = hexagonVertices[(6 * 0) + 3];
	
	indexedPoints[56] = hexagonVertices[(6 * 0) + 5];
	indexedPoints[57] = hexagonVertices[(6 * 0) + 4];
	indexedPoints[58] = hexagonVertices[(6 * 2) + 0];
	indexedPoints[59] = hexagonVertices[(6 * 2) + 1];
	
	indexedPoints[60] = hexagonVertices[(6 * 2) + 3];
	indexedPoints[61] = hexagonVertices[(6 * 2) + 2];
	indexedPoints[62] = hexagonVertices[(6 * 6) + 2];
	indexedPoints[63] = hexagonVertices[(6 * 6) + 3];
	
	indexedPoints[64] = hexagonVertices[(6 * 1) + 1];
	indexedPoints[65] = hexagonVertices[(6 * 1) + 0];
	indexedPoints[66] = hexagonVertices[(6 * 3) + 4];
	indexedPoints[67] = hexagonVertices[(6 * 3) + 5];
	
	indexedPoints[68] = hexagonVertices[(6 * 5) + 3];
	indexedPoints[69] = hexagonVertices[(6 * 5) + 2];
	indexedPoints[70] = hexagonVertices[(6 * 1) + 2];
	indexedPoints[71] = hexagonVertices[(6 * 1) + 3];

	indexedPoints[72] = hexagonVertices[(6 * 3) + 3];
	indexedPoints[73] = hexagonVertices[(6 * 3) + 2];
	indexedPoints[74] = hexagonVertices[(6 * 7) + 2];
	indexedPoints[75] = hexagonVertices[(6 * 7) + 3];
	
	indexedPoints[76] = hexagonVertices[(6 * 5) + 5];
	indexedPoints[77] = hexagonVertices[(6 * 5) + 4];
	indexedPoints[78] = hexagonVertices[(6 * 7) + 0];
	indexedPoints[79] = hexagonVertices[(6 * 7) + 1];
	
	indexedPoints[80] = hexagonVertices[(6 * 0) + 1];
	indexedPoints[81] = hexagonVertices[(6 * 0) + 0];
	indexedPoints[82] = hexagonVertices[(6 * 1) + 4];
	indexedPoints[83] = hexagonVertices[(6 * 1) + 5];
	
	indexedPoints[84] = hexagonVertices[(6 * 2) + 5];
	indexedPoints[85] = hexagonVertices[(6 * 2) + 4];
	indexedPoints[86] = hexagonVertices[(6 * 3) + 0];
	indexedPoints[87] = hexagonVertices[(6 * 3) + 1];
	
	indexedPoints[88] = hexagonVertices[(6 * 4) + 5];
	indexedPoints[89] = hexagonVertices[(6 * 4) + 4];
	indexedPoints[90] = hexagonVertices[(6 * 5) + 0];
	indexedPoints[91] = hexagonVertices[(6 * 5) + 1];
	
	indexedPoints[92] = hexagonVertices[(6 * 6) + 1];
	indexedPoints[93] = hexagonVertices[(6 * 6) + 0];
	indexedPoints[94] = hexagonVertices[(6 * 7) + 4];
	indexedPoints[95] = hexagonVertices[(6 * 7) + 5];

	//Octagons (6)
	//TOP
	indexedPoints[96] = hexagonVertices[(6 * 0) + 4];
	indexedPoints[97] = hexagonVertices[(6 * 0) + 3];
	indexedPoints[98] = hexagonVertices[(6 * 2) + 1];
	indexedPoints[99] = hexagonVertices[(6 * 4) + 2];
	indexedPoints[100] = hexagonVertices[(6 * 2) + 2];
	indexedPoints[101] = hexagonVertices[(6 * 4) + 1];
	indexedPoints[102] = hexagonVertices[(6 * 6) + 3];
	indexedPoints[103] = hexagonVertices[(6 * 6) + 4];
	
	
	//BOT
	indexedPoints[104] = hexagonVertices[(6 * 7) + 2];
	indexedPoints[105] = hexagonVertices[(6 * 7) + 1];
	indexedPoints[106] = hexagonVertices[(6 * 3) + 3];
	indexedPoints[107] = hexagonVertices[(6 * 5) + 4];
	indexedPoints[108] = hexagonVertices[(6 * 3) + 4];
	indexedPoints[109] = hexagonVertices[(6 * 5) + 3];
	indexedPoints[110] = hexagonVertices[(6 * 1) + 1];
	indexedPoints[111] = hexagonVertices[(6 * 1) + 2];
	
	//LEFT
	indexedPoints[112] = hexagonVertices[(6 * 6) + 2];
	indexedPoints[113] = hexagonVertices[(6 * 6) + 1];
	indexedPoints[114] = hexagonVertices[(6 * 2) + 3];
	indexedPoints[115] = hexagonVertices[(6 * 7) + 4];
	indexedPoints[116] = hexagonVertices[(6 * 2) + 4];
	indexedPoints[117] = hexagonVertices[(6 * 7) + 3];
	indexedPoints[118] = hexagonVertices[(6 * 3) + 1];
	indexedPoints[119] = hexagonVertices[(6 * 3) + 2];

	//RIGHT
	indexedPoints[120] = hexagonVertices[(6 * 1) + 4];
	indexedPoints[121] = hexagonVertices[(6 * 1) + 3];
	indexedPoints[122] = hexagonVertices[(6 * 0) + 1];
	indexedPoints[123] = hexagonVertices[(6 * 5) + 2];
	indexedPoints[124] = hexagonVertices[(6 * 0) + 2];
	indexedPoints[125] = hexagonVertices[(6 * 5) + 1];
	indexedPoints[126] = hexagonVertices[(6 * 4) + 3];
	indexedPoints[127] = hexagonVertices[(6 * 4) + 4];
	
	//BACK
	indexedPoints[128] = hexagonVertices[(6 * 0) + 0];
	indexedPoints[129] = hexagonVertices[(6 * 0) + 5];
	indexedPoints[130] = hexagonVertices[(6 * 1) + 5];
	indexedPoints[131] = hexagonVertices[(6 * 2) + 0];
	indexedPoints[132] = hexagonVertices[(6 * 1) + 0];
	indexedPoints[133] = hexagonVertices[(6 * 2) + 5];
	indexedPoints[134] = hexagonVertices[(6 * 3) + 5];
	indexedPoints[135] = hexagonVertices[(6 * 3) + 0];
	
	//FRONT
	indexedPoints[136] = hexagonVertices[(6 * 7) + 0];
	indexedPoints[137] = hexagonVertices[(6 * 7) + 5];
	indexedPoints[138] = hexagonVertices[(6 * 5) + 5];
	indexedPoints[139] = hexagonVertices[(6 * 6) + 0];
	indexedPoints[140] = hexagonVertices[(6 * 5) + 0];
	indexedPoints[141] = hexagonVertices[(6 * 6) + 5];
	indexedPoints[142] = hexagonVertices[(6 * 4) + 5];
	indexedPoints[143] = hexagonVertices[(6 * 4) + 0];


	// RENDER
	
	//Hexagons (8)
	for(int i = 0; i < 48; i++){
		if(i%6 == 0 && i != 0){
			EndPrimitive();
		}
		gl_Position = mvpMat * indexedPoints[i];
		EmitVertex();
	}
	EndPrimitive();

	//Quads (12)
	for(int i = 48; i < 96; i++){
		if(i%4 == 0 && i != 48){
			EndPrimitive();
		}
		gl_Position = mvpMat * indexedPoints[i];
		EmitVertex();
	}
	EndPrimitive();
	
	//Octagons (6)
		for(int i = 96; i < 144; i++){
		if(i%8 == 0 && i != 96){
			EndPrimitive();
		}
		gl_Position = mvpMat * indexedPoints[i];
		EmitVertex();
		//EndPrimitive();
	}
	EndPrimitive();

}

// FUNCTIONS

vec4 GetPlaneVector(int idx)
{
	vec4 norm = baseVertices[idx] - gl_in[0].gl_Position;
	float d = -((baseVertices[idx].x * norm.x) + (baseVertices[idx].y * norm.y) + (baseVertices[idx].z * norm.z));
	vec4 pointInPlane;
	pointInPlane.w = 1;
	pointInPlane.x = gl_in[0].gl_Position.x;
	pointInPlane.y = gl_in[0].gl_Position.y;
	pointInPlane.z = (pointInPlane.x * norm.x + pointInPlane.y * norm.y + d) / -norm.z;

	vec4 vector;
	vector.w = 0;
	vector.x = pointInPlane.x - baseVertices[idx].x;
	vector.y = pointInPlane.y - baseVertices[idx].y;
	vector.z = pointInPlane.z - baseVertices[idx].z;

	vector = normalize(vector);
	return vector;
}

mat4 RotationMatrix(vec4 axis, float angle){
	angle = angle * PI / 180;
	axis = normalize(axis);
	mat4 matrix;
	matrix[0] = vec4(axis.x*axis.x*(1-cos(angle))+cos(angle), 
					axis.x*axis.y*(1-cos(angle))+axis.z*sin(angle),
					axis.x*axis.z*(1-cos(angle))-axis.y*sin(angle),
					0);

	matrix[1] = vec4(axis.x*axis.y*(1-cos(angle))-axis.z*sin(angle), 
					axis.y*axis.y*(1-cos(angle))+cos(angle),
					axis.y*axis.z*(1-cos(angle))+axis.x*sin(angle),
					0);

	matrix[2] = vec4(axis.x*axis.z*(1-cos(angle))+axis.y*sin(angle), 
					axis.y*axis.z*(1-cos(angle))-axis.x*sin(angle),
					axis.z*axis.z*(1-cos(angle))+cos(angle),
					0);
	
	matrix[3] = vec4(0,0,0,1);

	return matrix;
}