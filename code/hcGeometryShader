#version 330 core
layout (points) in;
layout (points, max_vertices = 72) out;

uniform mat4 mvpMat;

float dist_to_base_point = 1.f;
float hexagonSize = .5f;

vec4 baseVertices[8];
vec4 hexagonVertices[6*8];
vec4 baseTruncatedVertices[24];
vec4 topVertex;
vec4 botVertex;

vec4 indexedPoints[72];

// FUNCTIONS DECLARATIONS
vec4 GetPlaneVector(int idx);
mat4 RotationMatrix(vec3 axis, float angle);

void main() {   

	// BASE POINTS

	// Back-Right-Top
	baseVertices[0] = gl_in[0].gl_Position + (normalize(vec4(-1,1,-1,0)) * dist_to_base_point);	
	// Back-Right-Bot
	baseVertices[1] = gl_in[0].gl_Position + (normalize(vec4(-1,-1,-1,0)) * dist_to_base_point);
	// Back-Left-Top
	baseVertices[2] = gl_in[0].gl_Position + (normalize(vec4(1,1,-1,0)) * dist_to_base_point);
	// Back-Left-Bot
	baseVertices[3] = gl_in[0].gl_Position + (normalize(vec4(1,-1,-1,0)) * dist_to_base_point);
	// Front-Right-Top
	baseVertices[4] = gl_in[0].gl_Position + (normalize(vec4(-1,1,1,0)) * dist_to_base_point);	
	// Front-Right-Bot
	baseVertices[5] = gl_in[0].gl_Position + (normalize(vec4(-1,-1,1,0)) * dist_to_base_point);
	// Front-Left-Top
	baseVertices[6] = gl_in[0].gl_Position + (normalize(vec4(1,1,1,0)) * dist_to_base_point);
	// Front-Left-Bot
	baseVertices[7] = gl_in[0].gl_Position + (normalize(vec4(1,-1,1,0)) * dist_to_base_point);


	// HEXAGONS
	vec4 inPlaneVec;
	mat4 rotMat;
	// Back-Right-Top
	inPlaneVec = GetPlaneVector(0);
	// 0
	hexagonVertices[0] = baseVertices[0] + (GetPlaneVector(0) * hexagonSize);
	// 1

	hexagonVertices[0] = baseVertices[0] + (GetPlaneVector(0) * hexagonSize);
	// 2
	// 3
	// 4
	// 5

	
	// RENDER
	gl_Position = mvpMat * baseVertices[0];
	EmitVertex();
	EndPrimitive();
	gl_Position = mvpMat * baseVertices[1];
	EmitVertex();
	EndPrimitive();
	gl_Position = mvpMat * baseVertices[2];
	EmitVertex();
	EndPrimitive();
	gl_Position = mvpMat * baseVertices[3];
	EmitVertex();
	EndPrimitive();
	gl_Position = mvpMat * baseVertices[4];
	EmitVertex();
	EndPrimitive();
	gl_Position = mvpMat * baseVertices[5];
	EmitVertex();
	EndPrimitive();
	gl_Position = mvpMat * baseVertices[6];
	EmitVertex();
	EndPrimitive();
	gl_Position = mvpMat * baseVertices[7];
	EmitVertex();
	EndPrimitive();

	gl_Position = mvpMat * hexagonVertices[0];
	EmitVertex();
	EndPrimitive();
}
	
vec4 GetPlaneVector(int idx)
{
	vec4 norm = baseVertices[idx] - gl_in[0].gl_Position;
	float d = -((baseVertices[idx].x * norm.x) + (baseVertices[idx].y * norm.y) + (baseVertices[idx].z * norm.z));
	vec4 pointInPlane;
	pointInPlane.w = 1;
	pointInPlane.x = 1;
	pointInPlane.y = 1;
	pointInPlane.z = (pointInPlane.x * norm.x + pointInPlane.y * norm.y + d) / -norm.z;

	vec4 vector;
	vector.w = 0;
	vector.x = pointInPlane.x - baseVertices[idx].x;
	vector.y = pointInPlane.y - baseVertices[idx].y;
	vector.z = pointInPlane.z - baseVertices[idx].z;

	vector = normalize(vector);
	return vector;
}

mat4 RotationMatrix(vec3 axis, float angle){
	axis = normalize(axis);
	mat4 matrix;
	matrix[0] = vec4(axis.x*axis.x*(1-cos(angle))+cos(angle), 
					axis.x*axis.y*(1-cos(angle))+axis.z*sin(angle),
					axis.x*axis.z*(1-cos(angle))-axis.y*sin(angle),
					0);

	matrix[1] = vec4(axis.x*axis.y*(1-cos(angle))-axis.z*sin(angle), 
					axis.y*axis.y*(1-cos(angle))+cos(angle),
					axis.y*axis.z*(1-cos(angle))+axis.x*sin(angle),
					0);

	matrix[2] = vec4(axis.x*axis.z*(1-cos(angle))+axis.y*sin(angle), 
					axis.y*axis.z*(1-cos(angle))-axis.x*sin(angle),
					axis.z*axis.z*(1-cos(angle))+cos(angle),
					0);
	
	matrix[3] = vec4(0,0,0,1);

	return matrix;
}