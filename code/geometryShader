#version 330 core
layout (points) in;
layout (triangle_strip, max_vertices = 64) out;

uniform mat4 mvpMat;

float length = 3;

float height;
float slant_height;


vec4 baseVertices[4];
vec4 baseTruncatedVertices[24];
vec4 topVertex;
vec4 botVertex;

vec4 indexedPoints[24];

void main() {   
	height = (sqrt(2)/2) * length;
	slant_height = (sqrt(3)/2) * length;

	float dist_to_base_point = sqrt(length*length - height*height);

	// Top and Bottom Points
	topVertex = gl_in[0].gl_Position + vec4(0,height,0,0);
	botVertex = gl_in[0].gl_Position + vec4(0,-height,0,0);

	// Base Points
	baseVertices[0] = gl_in[0].gl_Position + vec4(dist_to_base_point,0,0,0);
	baseVertices[1] = gl_in[0].gl_Position + vec4(-dist_to_base_point,0,0,0);
	baseVertices[2] = gl_in[0].gl_Position + vec4(0,0,dist_to_base_point,0);
	baseVertices[3] = gl_in[0].gl_Position + vec4(0,0,-dist_to_base_point,0);
	
	// Truncations
	// From Base 0
	baseTruncatedVertices[0] = baseVertices[0] + (normalize(baseVertices[2] - baseVertices[0]) * (length / 3));
	baseTruncatedVertices[1] = baseVertices[0] + (normalize(baseVertices[3] - baseVertices[0]) * (length / 3));	
	baseTruncatedVertices[2] = baseVertices[0] + (normalize(topVertex - baseVertices[0]) * (length / 3));
	baseTruncatedVertices[3] = baseVertices[0] + (normalize(botVertex - baseVertices[0]) * (length / 3));	
																												
	// From Base 1																								
	baseTruncatedVertices[4] = baseVertices[1] + (normalize(baseVertices[2] - baseVertices[1]) * (length / 3));
	baseTruncatedVertices[5] = baseVertices[1] + (normalize(baseVertices[3] - baseVertices[1]) * (length / 3));	
	baseTruncatedVertices[6] = baseVertices[1] + (normalize(topVertex - baseVertices[1]) * (length / 3));
	baseTruncatedVertices[7] = baseVertices[1] + (normalize(botVertex - baseVertices[1]) * (length / 3));	
																												
	// From Base 2																								
	baseTruncatedVertices[8] = baseVertices[2] + (normalize(baseVertices[0] - baseVertices[2]) * (length / 3));
	baseTruncatedVertices[9] = baseVertices[2] + (normalize(baseVertices[1] - baseVertices[2]) * (length / 3));
	baseTruncatedVertices[10] = baseVertices[2] + (normalize(topVertex - baseVertices[2]) * (length / 3));
	baseTruncatedVertices[11] = baseVertices[2] + (normalize(botVertex - baseVertices[2]) * (length / 3));	
																												
	// From Base 3																								
	baseTruncatedVertices[12] = baseVertices[3] + (normalize(baseVertices[0] - baseVertices[3]) * (length / 3));
	baseTruncatedVertices[13] = baseVertices[3] + (normalize(baseVertices[1] - baseVertices[3]) * (length / 3));
	baseTruncatedVertices[14] = baseVertices[3] + (normalize(topVertex - baseVertices[3]) * (length / 3));
	baseTruncatedVertices[15] = baseVertices[3] + (normalize(botVertex - baseVertices[3]) * (length / 3));	

	// From Top
	baseTruncatedVertices[16] = topVertex + (normalize(baseVertices[0] - topVertex) * (length / 3));
	baseTruncatedVertices[17] = topVertex + (normalize(baseVertices[1] - topVertex) * (length / 3));
	baseTruncatedVertices[18] = topVertex + (normalize(baseVertices[2] - topVertex) * (length / 3));
	baseTruncatedVertices[19] = topVertex + (normalize(baseVertices[3] - topVertex) * (length / 3));

	// From Bottom
	baseTruncatedVertices[20] = botVertex + (normalize(baseVertices[0] - botVertex) * (length / 3));
	baseTruncatedVertices[21] = botVertex + (normalize(baseVertices[1] - botVertex) * (length / 3));
	baseTruncatedVertices[22] = botVertex + (normalize(baseVertices[2] - botVertex) * (length / 3));
	baseTruncatedVertices[23] = botVertex + (normalize(baseVertices[3] - botVertex) * (length / 3));
	

	// INDEXING
	indexedPoints[0] = baseTruncatedVertices[1];
	indexedPoints[1] = baseTruncatedVertices[2];
	indexedPoints[2] = baseTruncatedVertices[3];
	indexedPoints[3] = baseTruncatedVertices[0];

	indexedPoints[4] = baseTruncatedVertices[5];
	indexedPoints[5] = baseTruncatedVertices[7];
	indexedPoints[6] = baseTruncatedVertices[6];
	indexedPoints[7] = baseTruncatedVertices[4];

	indexedPoints[8] = baseTruncatedVertices[9];
	indexedPoints[9] = baseTruncatedVertices[11];
	indexedPoints[10] = baseTruncatedVertices[10];
	indexedPoints[11] = baseTruncatedVertices[8];

	indexedPoints[12] = baseTruncatedVertices[13];
	indexedPoints[13] = baseTruncatedVertices[14];
	indexedPoints[14] = baseTruncatedVertices[15];
	indexedPoints[15] = baseTruncatedVertices[12];

	indexedPoints[16] = baseTruncatedVertices[17];
	indexedPoints[17] = baseTruncatedVertices[18];
	indexedPoints[18] = baseTruncatedVertices[19];
	indexedPoints[19] = baseTruncatedVertices[16];

	indexedPoints[20] = baseTruncatedVertices[21];
	indexedPoints[21] = baseTruncatedVertices[23];
	indexedPoints[22] = baseTruncatedVertices[22];
	indexedPoints[23] = baseTruncatedVertices[20];



	// RENDER

	// Indices
	gl_Position = mvpMat * indexedPoints[0];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[1];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[2];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[3];
	EmitVertex();
	EndPrimitive();	

	gl_Position = mvpMat * indexedPoints[4];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[5];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[6];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[7];
	EmitVertex();
	EndPrimitive();	

	gl_Position = mvpMat * indexedPoints[8];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[9];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[10];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[11];
	EmitVertex();
	EndPrimitive();	

	gl_Position = mvpMat * indexedPoints[12];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[13];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[14];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[15];
	EmitVertex();
	EndPrimitive();	

	gl_Position = mvpMat * indexedPoints[16];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[17];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[18];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[19];
	EmitVertex();
	EndPrimitive();	

	gl_Position = mvpMat * indexedPoints[20];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[21];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[22];
	EmitVertex();
	gl_Position = mvpMat * indexedPoints[23];
	EmitVertex();
	EndPrimitive();

}