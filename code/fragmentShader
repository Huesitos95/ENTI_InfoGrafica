#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;

uniform float ambientValue;
uniform float specularValue;
uniform float diffuseValue;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
	// ambient
	vec3 ambient = ambientValue * lightColor;
	
	// diffuse 
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diffuseValue * (diff * lightColor);

	// specular
	vec3 viewDir = normalize(FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularValue * spec * lightColor;

	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = vec4(result, 1.0);
}